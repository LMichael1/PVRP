@using PVRPSolver
@model Solution
@{
    ViewData["Title"] = "Solution Info";
}

<div class="text-center">
    <h1 class="display-4">Vehicle Routing Problem</h1>
    <p><a href="/Home">Upload</a> another dataset</p>
</div>

<div id="mapid" style="width:100%;height:400px;"></div>

<br>

<div class="row">
    <div class="col-4">
        <div class="list-group" id="list-tab" role="tablist">
            <a class="list-group-item list-group-item-primary list-group-item-action d-flex justify-content-between align-items-center active" onclick="showTotal()" id="list-home-list" data-bs-toggle="list" href="#list-home" role="tab" aria-controls="list-home">Total<span class="badge bg-primary rounded-pill">@Model.TotalDistanceKm km</span></a>
            @for (int i = 0; i < Model.Routes.Count; i++)
            {
                <a class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" onclick="showRoute(@i)" id="list-@i-list" data-bs-toggle="list" href="#list-@i" role="tab" aria-controls="list-@i">Route @i<div><span class="badge bg-secondary rounded-pill" style="margin-right: 8px">Day @Model.Routes[i].Day</span><span class="badge bg-secondary rounded-pill">@Model.Routes[i].DistanceKm km</span></div></a>
            }
        </div>
    </div>
    <div class="col-8">
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="list-home" role="tabpanel" aria-labelledby="list-home-list">
                <div class="container text-center">
                    <h3>Solution info</h3>
                    <br>
                    <div class="row">
                        <div class="col">
                            <h5>Points count</h5>
                            <p>@Model.Points.Count</p>
                        </div>
                        <div class="col">
                            <h5>Vehicles count</h5>
                            <p>@Model.Vehicles.Count</p>
                        </div>
                        <div class="col">
                            <h5>Routes count</h5>
                            <p>@Model.Routes.Count</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <h5>Total length</h5>
                            <p>@Model.TotalDistanceKm km</p>
                        </div>
                        <div class="col">
                            <h5>Total length with penalties</h5>
                            <p>@Model.TotalFitnessKm km</p>
                        </div>
                    </div>
                </div>
            </div>
            @for (int i = 0; i < Model.Routes.Count; i++)
            {
                <div class="tab-pane fade" id="list-@i" role="tabpanel" aria-labelledby="list-@i-list">
                    <div class="container text-center">
                        <h3>Route info</h3>
                        <br>
                        <div class="row">
                            <div class="col">
                                <h5>Length</h5>
                                <p>@Model.Routes[i].DistanceKm km</p>
                            </div>
                            <div class="col">
                                <h5>Length with penalties</h5>
                                <p>@Model.Routes[i].FitnessKm km</p>
                            </div>
                            <div class="col">
                                <h5>Points count</h5>
                                <p>@(Model.Routes[i].Points.Count - 2)</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <h5>Day</h5>
                                <p>@Model.Routes[i].Day</p>
                            </div>
                            <div class="col">
                                <h5>Start time</h5>
                                <p>@Model.Routes[i].StartTimeString</p>
                            </div>
                            <div class="col">
                                <h5>End time</h5>
                                <p>@Model.Routes[i].EndTimeString</p>
                            </div>
                        </div>
                        <br>
                        <h3>Vehicle info</h3>
                        <br>
                        <div class="row">
                            <div class="col">
                                <h5>ID</h5>
                                <p>@Model.Routes[i].Vehicle.ID</p>
                            </div>
                        </div>
                        <h3>Points</h3>
                        <div class="accordion accordion-flush" id="accordionFlushExample">
                            @for (int j = 0; j < Model.Routes[i].Points.Count; j++)
                            {
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="flush-heading-@j">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-@j" aria-expanded="false" aria-controls="flush-collapse-@j">
                                            Point @Model.Routes[i].Points[j].ID
                                            @if (@Model.Routes[i].Points[j].IsDepot)
                                            {
                                                <text>(depot)</text>
                                            }
                                        </button>
                                    </h2>
                                    <div id="flush-collapse-@j" class="accordion-collapse collapse" aria-labelledby="flush-heading-@j" data-bs-parent="#accordionFlushExample">
                                        <div class="accordion-body">
                                            <div class="row">
                                                <div class="col">
                                                    <h5>Coordinates</h5>
                                                    <p>@Model.Routes[i].Points[j].Latitude; @Model.Routes[i].Points[j].Longitude</p>
                                                </div>
                                                @if (!Model.Routes[i].Points[j].IsDepot)
                                                {
                                                    <div class="col">
                                                        <h5>Service time</h5>
                                                        <p>@(Model.Routes[i].Points[j].ServiceTime / 60) min</p>
                                                    </div>
                                                }
                                            </div>
                                            @if (!Model.Routes[i].Points[j].IsDepot)
                                            {
                                                <div class="row">
                                                    <div class="col">
                                                        <h5>Late penalty</h5>
                                                        <p>@Model.Routes[i].Points[j].PenaltyLate</p>
                                                    </div>
                                                    <div class="col">
                                                        <h5>Wait penalty</h5>
                                                        <p>@Model.Routes[i].Points[j].PenaltyWait</p>
                                                    </div>
                                                    <div class="col">
                                                        <h5>Arrival time</h5>
                                                        <p>@TimeSpan.FromSeconds(Model.Routes[i].ArrivalTimes[Model.Routes[i].Points[j]]).ToString(@"dd\.hh\:mm")</p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col">
                                                        <h5>Time windows</h5>
                                                        <p>
                                                            @foreach (var window in Model.Routes[i].Points[j].TimeWindows)
                                                            {
                                                                <text>@TimeSpan.FromSeconds(window.Start).ToString(@"dd\.hh\:mm")-@TimeSpan.FromSeconds(window.End).ToString(@"dd\.hh\:mm") </text>
                                                            }
                                                        </p>
                                                    </div>
                                                    <div class="col">
                                                        <h5>Patterns</h5>
                                                        <p>
                                                            @foreach (var key in Model.Routes[i].Points[j].Patterns.Keys)
                                                            {
                                                                <text>(@String.Join(", ", Model.Routes[i].Points[j].Patterns[key]))<br /></text>
                                                            }
                                                        </p>
                                                    </div>
                                                    <div class="col">
                                                        <h5>Selected pattern</h5>
                                                        <p>
                                                            <text>(@String.Join(", ", Model.Routes[i].Points[j].Patterns[Model.Routes[i].Points[j].CurrentPattern]))</text>
                                                        </p>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    var ids1 = [];
    var points1 = [];

    @foreach (var item in Model.Points)
    {
        <text>
                ids1.push('@item.ID');
                points1.push(L.latLng(parseFloat('@item.Latitude'.replace(',', '.')), parseFloat('@item.Longitude'.replace(',', '.'))));
        </text>
    }

    class Route {
        constructor(ids, points) {
            this.ids = ids;
            this.points = points;
        }
    }

    var routes = []

    @foreach (var route in Model.Routes)
    {
        <text>
            var ids = [];
            var points = [];
        </text>

        @foreach (var item in route.Points)
        {
            <text>
                        ids.push('@item.ID');
                        points.push(L.latLng(parseFloat('@item.Latitude'.replace(',', '.')), parseFloat('@item.Longitude'.replace(',', '.'))));
            </text>
        }

        <text>routes.push(new Route(ids, points));</text>
    }

    var map = L.map('mapid').setView(points1[0], 7);;

    var layer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png?{foo}', {
        foo: 'bar',
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>'
    }).addTo(map);

    var greenIcon = new L.Icon({
        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    for (var i = 0; i < points1.length; i++) {
        if (ids1[i] < 0) {
            var popup = '<b>Depot ' + ids1[i] + '</b><br>' + points1[i].lat + ', ' + points1[i].lng;
            L.marker(points1[i], {
                icon: greenIcon
            }).bindPopup(popup).addTo(map);
        }
        else {
            var popup = '<b>Point ' + ids1[i] + '</b><br>' + points1[i].lat + ', ' + points1[i].lng;
            L.marker(points1[i]).bindPopup(popup).addTo(map);
        }
    }

    function showTotal() {
        window.scrollTo({
            top: 0,
            behavior: "smooth"
        });

        map.remove();

        map = L.map('mapid').setView(points1[0], 7);;
        layer.addTo(map);

        for (var i = 0; i < points1.length; i++) {
            if (ids1[i] < 0) {
                var popup = '<b>Depot ' + ids1[i] + '</b><br>' + points1[i].lat + ', ' + points1[i].lng;
                L.marker(points1[i], {
                    icon: greenIcon
                }).bindPopup(popup).addTo(map);
            }
            else {
                var popup = '<b>Point ' + ids1[i] + '</b><br>' + points1[i].lat + ', ' + points1[i].lng;
                L.marker(points1[i]).bindPopup(popup).addTo(map);
            }
        }
    }

    function showRoute(id) {
        window.scrollTo({
            top: 0,
            behavior: "smooth"
        });

        map.remove();

        map = L.map('mapid');
        layer.addTo(map);

        control = L.Routing.control({
            waypoints: routes[id].points,
            draggableWaypoints: false,
            routeWhileDragging: false,
            lineOptions: {
                addWaypoints: false
            },
            createMarker: function (i, wp, nWps) {
                if (i === 0 || i === nWps - 1) {
                    var popup = '<b>Depot ' + routes[id].ids[i] + '</b><br>' + routes[id].points[i].lat + ', ' + routes[id].points[i].lng;
                    return L.marker(wp.latLng, {
                        icon: greenIcon
                    }).bindPopup(popup);
                } else {
                    var popup = '<b>Point ' + routes[id].ids[i] + '</b><br>' + routes[id].points[i].lat + ', ' + routes[id].points[i].lng;
                    return L.marker(wp.latLng).bindPopup(popup);
                }
            }
        }).addTo(map);

        control.hide();
    }
</script>
